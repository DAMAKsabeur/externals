From efea9af185d1d8212efcc195e6ca1b6afebbe184 Mon Sep 17 00:00:00 2001
From: Vigneshwaran K <Vigneshwaran.Karunanithi@aox.de>
Date: Wed, 3 Aug 2022 14:49:42 +0000
Subject: [PATCH 1/2] s32g/kernel:update sched clk with correct offset

s32g sched_clock initial values updated with stm counter values
to add boottime bw linux boot from uboot to sched clk registration.

Note: uboot will initialize kernel device tree and setup stm
device, if not all the operations in baseline_clcok feature
will be ignored.

Upstream-Status: Inappropriate [custom device configuration]
Signed-off-by: Vigneshwaran K <Vigneshwaran.Karunanithi@aox.de>
---
 arch/arm64/boot/dts/freescale/s32cc.dtsi |   7 ++
 arch/arm64/include/asm/fixmap.h          |   4 +
 arch/arm64/kernel/setup.c                |   2 +
 drivers/misc/Kconfig                     |   9 ++
 drivers/misc/Makefile                    |   1 +
 drivers/misc/stm_baseline_clk.c          | 114 +++++++++++++++++++++++
 include/linux/stm_baseline_clk.h         |  24 +++++
 kernel/printk/printk.c                   |   3 +-
 kernel/time/sched_clock.c                |   4 +-
 9 files changed, 165 insertions(+), 3 deletions(-)
 create mode 100644 drivers/misc/stm_baseline_clk.c
 create mode 100644 include/linux/stm_baseline_clk.h

diff --git a/arch/arm64/boot/dts/freescale/s32cc.dtsi b/arch/arm64/boot/dts/freescale/s32cc.dtsi
index d61f48887fb1..89fc9ce77446 100644
--- a/arch/arm64/boot/dts/freescale/s32cc.dtsi
+++ b/arch/arm64/boot/dts/freescale/s32cc.dtsi
@@ -1049,4 +1049,11 @@
 			mbi-ranges = <167 16>;
 		};
 	};
+
+	stm_baseline_clk {
+		compatible = "fsl,stm_baseline_clk";
+		/* reg and parent-clk-rate will be set by uboot*/
+		reg = <0x0 0x0>;
+		parent-clk-rate = <0x0 0x0>;
+	};
 };
diff --git a/arch/arm64/include/asm/fixmap.h b/arch/arm64/include/asm/fixmap.h
index daff882883f9..bf215fad8283 100644
--- a/arch/arm64/include/asm/fixmap.h
+++ b/arch/arm64/include/asm/fixmap.h
@@ -68,6 +68,10 @@ enum fixed_addresses {
 	FIX_ENTRY_TRAMP_DATA,
 #define TRAMP_VALIAS		(__fix_to_virt(FIX_ENTRY_TRAMP_TEXT1))
 #endif /* CONFIG_UNMAP_KERNEL_AT_EL0 */
+#ifdef CONFIG_STM_BASELINE_CLK
+	BASELINE_CLK_FIX_MAP,
+#endif /*CONFIG_STM_BASELINE_CLK*/
+
 	__end_of_permanent_fixed_addresses,
 
 	/*
diff --git a/arch/arm64/kernel/setup.c b/arch/arm64/kernel/setup.c
index eb4b24652c10..50b1602e0b4e 100644
--- a/arch/arm64/kernel/setup.c
+++ b/arch/arm64/kernel/setup.c
@@ -50,6 +50,7 @@
 #include <asm/efi.h>
 #include <asm/xen/hypervisor.h>
 #include <asm/mmu_context.h>
+#include <linux/stm_baseline_clk.h>
 
 static int num_standard_resources;
 static struct resource *standard_resources;
@@ -301,6 +302,7 @@ void __init __no_sanitize_address setup_arch(char **cmdline_p)
 	early_ioremap_init();
 
 	setup_machine_fdt(__fdt_pointer);
+	stm_baseline_dev_init();
 
 	/*
 	 * Initialise the static keys early as they may be enabled by the
diff --git a/drivers/misc/Kconfig b/drivers/misc/Kconfig
index fafa8b0d8099..73dfc8337e12 100644
--- a/drivers/misc/Kconfig
+++ b/drivers/misc/Kconfig
@@ -30,6 +30,15 @@ config AD525X_DPOT
 	  This driver can also be built as a module.  If so, the module
 	  will be called ad525x_dpot.
 
+config STM_BASELINE_CLK
+        bool "tune boot offset with stm reference clk"
+        depends on OF
+        default n
+        help
+          This driver initialize systemclk with correct boot offset for
+          first time.
+          Say N if not sure
+
 config AD525X_DPOT_I2C
 	tristate "support I2C bus connection"
 	depends on AD525X_DPOT && I2C
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index 7380e64027c3..c26272f7526f 100644
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -58,3 +58,4 @@ obj-$(CONFIG_UACCE)		+= uacce/
 obj-$(CONFIG_XILINX_SDFEC)	+= xilinx_sdfec.o
 obj-$(CONFIG_HISI_HIKEY_USB)	+= hisi_hikey_usb.o
 obj-$(CONFIG_FCCU)	+= fccu/
+obj-$(CONFIG_STM_BASELINE_CLK) += stm_baseline_clk.o
diff --git a/drivers/misc/stm_baseline_clk.c b/drivers/misc/stm_baseline_clk.c
new file mode 100644
index 000000000000..3a11593b13ce
--- /dev/null
+++ b/drivers/misc/stm_baseline_clk.c
@@ -0,0 +1,114 @@
+// SPDX-License-Identifier: GPL-2.0
+#include <linux/stm_baseline_clk.h>
+/*
+ * NOTE: Time being code is NOT Wrapping safe. So sched_clock must be registered
+ * before STM counter wrapped.
+ *
+ * Ex: in s32grdb2 when scmi input is 133333333Hz and divider is 1, then
+ * wrap sec is around 32.212 sec. so Sched_clk registration should be before
+ * that
+ */
+#define NS_PER_SECOND   1000000000
+#define STM_REG_CNT     0x4
+#define STM_REG_EN      (1 << 0)
+#define STM_REG_FR      (1 << 1)
+#define STM_REG_CR      0x0
+
+static void *device_addrs;
+static unsigned char divider_used;
+static unsigned int ticks_per_ns;
+static u64 stm_dummy_get_ns(void);
+u64 (*stm_baseline_clk_get_ns)(void) = stm_dummy_get_ns;
+
+static u64 stm_dummy_get_ns(void)
+{
+	return 0;
+}
+
+/*
+ * stm_baseline_get_bootoffset : oneshot function used inside sched clk
+				registrations to find initial boot offset from
+				uboot.
+ *
+ * Warning : sched_clock will be registered very initial stages of kernel
+ *           booting. So this function assumed to called with in 1/2 secs
+ *           after clk initialization. If stm clock counter wrapped before that
+ *           will lead to invalid offset.
+ */
+u64 __init stm_baseline_get_bootoffset(u64 ns)
+{
+	if (stm_baseline_clk_get_ns == local_clock)
+		return ns;
+	/* stop timer */
+	writel(0, device_addrs + STM_REG_CR);
+	/* change back to actual clock */
+	stm_baseline_clk_get_ns = local_clock;
+
+	return ns + (readl(device_addrs + STM_REG_CNT) * ticks_per_ns);
+}
+
+
+/*
+ * NOTE: not wrapping safe.
+ */
+static u64 stm_to_ns(void)
+{
+	return readl(device_addrs + STM_REG_CNT) * ticks_per_ns;
+}
+/*
+ *  Just initialize the stm timer for boot offset calculation.
+ *  Code kept as low as possible to avoid unwanted increase in bootime.
+ */
+int __init stm_baseline_dev_init(void)
+{
+	int dt_offset;
+	const __be64 *prop;
+	phys_addr_t base_addr;
+	u64 stm_parent_rate;
+
+	dt_offset = fdt_node_offset_by_compatible(initial_boot_params, 0,
+							"fsl,stm_baseline_clk");
+	if (dt_offset < 0) {
+		/* customer might use different dtb */
+		pr_debug("Warning: printk stm clock device node access err\n");
+		goto out;
+	}
+
+	/* get device address */
+	prop = fdt_getprop(initial_boot_params, dt_offset, "reg", NULL);
+	if (!prop) {
+		pr_err("Error: reg property is empty..\n");
+		goto out;
+	}
+
+	base_addr = fdt64_to_cpu(*prop);
+	if (!base_addr)
+		goto out;
+
+	prop = fdt_getprop(initial_boot_params, dt_offset, "parent-clk-rate",
+			NULL);
+	if (!prop) {
+		pr_err("Error: in getting parent clk rate..\n");
+		goto out;
+	}
+	stm_parent_rate = fdt64_to_cpu(*prop);
+
+	/* static virtual memory map */
+	set_fixmap_io(BASELINE_CLK_FIX_MAP, base_addr & PAGE_MASK);
+	device_addrs = (void __iomem *)fix_to_virt(BASELINE_CLK_FIX_MAP);
+	device_addrs += (base_addr & ~PAGE_MASK);
+
+	divider_used = (unsigned char)((readl(device_addrs + STM_REG_CR)
+					& 0xff00) >> 8);
+
+	ticks_per_ns = NS_PER_SECOND / (stm_parent_rate / (divider_used + 1));
+	stm_baseline_clk_get_ns = stm_to_ns;
+	pr_debug("%s: device addr %#x  div = %d ns=%d\n", __func__,
+			base_addr, divider_used, ticks_per_ns);
+
+	return 0;
+out:
+	stm_baseline_clk_get_ns = local_clock;
+	pr_debug("Warning:STM baseline not requested\n");
+	return -EINVAL;
+}
diff --git a/include/linux/stm_baseline_clk.h b/include/linux/stm_baseline_clk.h
new file mode 100644
index 000000000000..5645f429b075
--- /dev/null
+++ b/include/linux/stm_baseline_clk.h
@@ -0,0 +1,24 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _STM_BASELINE_CLK_H_
+#define _STM_BASELINE_CLK_H_
+
+#include <linux/kernel.h>
+#include <linux/io.h>
+#include <linux/types.h>
+#include <linux/sched/clock.h>
+#include <asm/fixmap.h>
+#include <asm/page.h>
+#include <linux/libfdt.h>
+#include <linux/of_fdt.h>
+
+#ifdef CONFIG_STM_BASELINE_CLK
+u64 stm_baseline_get_bootoffset(u64 ns);
+extern u64 (*stm_baseline_clk_get_ns)(void);
+int stm_baseline_dev_init(void);
+#else
+#define stm_baseline_get_bootoffset(x) x
+#define stm_baseline_clk_get_ns() local_clock()
+#define stm_baseline_dev_init() do { } while (0)
+#endif /*CONFIG_STM_BASELINE_CLK*/
+
+#endif /* _STM_BASELINE_CLK_H_ */
diff --git a/kernel/printk/printk.c b/kernel/printk/printk.c
index dea500da571f..f420173fb522 100644
--- a/kernel/printk/printk.c
+++ b/kernel/printk/printk.c
@@ -61,6 +61,7 @@
 #include "printk_ringbuffer.h"
 #include "console_cmdline.h"
 #include "braille.h"
+#include <linux/stm_baseline_clk.h>
 
 int console_printk[4] = {
 	CONSOLE_LOGLEVEL_DEFAULT,	/* console_loglevel */
@@ -1971,7 +1972,7 @@ static int vprintk_store(int facility, int level,
 	 * close to the call of printk(). This provides a more deterministic
 	 * timestamp with respect to the caller.
 	 */
-	ts_nsec = local_clock();
+	ts_nsec = stm_baseline_clk_get_ns();
 
 	if (!printk_enter_irqsave(&irqflags))
 		return 0;
diff --git a/kernel/time/sched_clock.c b/kernel/time/sched_clock.c
index b1b9b12899f5..0301da743aff 100644
--- a/kernel/time/sched_clock.c
+++ b/kernel/time/sched_clock.c
@@ -16,7 +16,7 @@
 #include <linux/sched_clock.h>
 #include <linux/seqlock.h>
 #include <linux/bitops.h>
-
+#include <linux/stm_baseline_clk.h>
 #include "timekeeping.h"
 
 /**
@@ -187,7 +187,7 @@ sched_clock_register(u64 (*read)(void), int bits, unsigned long rate)
 	rd.mult			= new_mult;
 	rd.shift		= new_shift;
 	rd.epoch_cyc		= new_epoch;
-	rd.epoch_ns		= ns;
+	rd.epoch_ns		= stm_baseline_get_bootoffset(ns);
 
 	update_clock_read_data(&rd);
 
-- 
2.17.1

